#!/bin/bash

#
# vital-backup - backup absolutely key data to multiple destinations
#

VERSION="1.1.0"
VERSION_DATE="2019.1224.01"

# Config file defults to a system wide instance,
# but user can use --config to point to an alternate file
CONFIG_FILE=/etc/vital-backup.conf

# Tar parameters to create an archive. Specify compression type, or not, here
# create, verbose, Sparse, compress (bzip2), a new file..
CONFIG_TAR_PARAMETERS="cvS"

# Match the extension to your tar parameters: .tar, .tgz, .tbz, etc.
CONFIG_TAR_EXT=".tar"

CONFIG_RSYNC_PARAMETERS="--verbose --recursive --human-readable --relative"

CONFIG_RSYNC_EXT=".rsync"

# When not used, make this "." to separate other fields
CONFIG_FILE_TAG="vital-backup."

BACKUP_TO_ALL_TARGETS=true

# Log rsync or tar backups to this target
LOG_DIR=~/logs
LOG_FILE=${LOG_DIR}/vital-backup.log

# Default count of sources and targets to zero, define an array for each
SOURCES=0
SOURCE_LIST=()
SOURCE_DIR_STRING=""

EXCLUDES=0
EXCLUDE_LIST=()
TAR_EXCLUDE_DIR_STRING=""
RSYNC_EXCLUDE_DIR_STRING=""

TARGETS=0
TARGET_DIR=()
TARGET_NAME=()
TARGET_METHOD=()

SKIP_TARGETS=0
SKIP_TARGETS_LIST=()
CHECK_SKIPS=false

#
# Functions
#

function echo_log {
  echo $1 | tee -a "${LOG_FILE}"
}

# Ensure we have a log directory in the user's home directory
function check_log_dir {
  if [[ ! -d "${LOG_DIR}" ]]
  then
    mkdir "${LOG_DIR}"
  fi

  # Attempt to write to it, check result and bail if error
  touch "${LOG_FILE}"
  RESULT=$?
  if [[ $RESULT -gt 0 ]]
  then
    echo "Error: Cannot write to log file $LOG_FILE"
    exit 1
  fi
}

function only_target {
  echo "Backing up to one target"
  BACKUP_TO_ALL_TARGETS=false
  CLI_TARGET_NAME_VALID=false

  echo "Error: only_target() this feature not completed."
  exit 1
}

function use_config {
  echo "Using alternate config file $1"

  C_FILE=${1:-"_null"}
  if [[ $C_FILE == "_null" ]]
  then
    echo "Error: You must specify a valid config file when using --config"
    usage
    exit 1
  else
    if [[ ! -r "$1" ]]
    then
      echo "Error: Config file $1 is not readable"
      exit 1
    else
      CONFIG_FILE=$1
    fi
  fi
}

# Add a named target to an array of targets to skip
function skip_target {

  # If the parameter provided to this is not empty, append it to the array
  if [[ ! -z $1 ]]
  then
    echo "Adding skip target $1"
    SKIP_TARGETS=$((SKIP_TARGETS+1))
    SKIP_TARGET_LIST+=("$1")
    # Toggle this so we skip things when reading the config file
    CHECK_SKIPS=true
  else
    echo "Error: You must supply a target name with --skip-target"
    exit 1
  fi
}

#
# Command line processing
#

# specify config file
# debugging on
# quiet operation, no reporting
# add directories
# add targets
# tar, cp or rsync
# include hour in datestamp, or not

function usage {
	echo "vital-backup $VERSION $VERSION_DATE"
	echo
	echo "usage: vital-backup <options>"
  echo
  echo "Configuration is read from ~/.vital-backup.conf"
	echo
	echo
  echo "    --target <target> Write to only this named target"
  echo
  echo "    --skip <target>   Skip a target from the config file"
  echo
  echo "    --list            Show the configuration file's contents"
  echo
  echo "    --config <file>   Use alternate config file"
}

# Discard unwanted data on config lines

function clean_trailing_input_line {
  # Truncate anything fields that follow our source directory
  TRUNC_SPACE=$(expr index "$INPUT_LINE" " ")
  if [[ $TRUNC_SPACE -gt 0 ]]
  then
    TRUNC_SPACE=$((TRUNC_SPACE-1))
    INPUT_LINE=${INPUT_LINE:0:$TRUNC_SPACE}
    #echo "Truncated Space $INPUT_LINE"
  fi

  # Truncate any comments on the right side of our source directory
  TRUNC_HASH=$(expr index "$INPUT_LINE" "#")
  if [[ $TRUNC_HASH -gt 0 ]]
  then
    TRUNC_HASH=$((TRUNC_HASH-1))
    INPUT_LINE=${INPUT_LINE:0:$TRUNC_HASH}
    #echo "Truncated Hash $INPUT_LINE"
  fi
}

#
# Append a target from the config file to the target array
#

function add_target {

  # Increment the number of targets
  TARGETS=$((TARGETS+1))

  # The mounted directory location of the target storage
  TARGET_DIR+=("$1")

  # The config file name of the target
  TARGET_NAME+=("$2")

  # The method of backing up data to this target
  TARGET_METHOD+=("$3")
}

function load_config_file {

  # Check for access to config file
  if [[ ! -r $CONFIG_FILE ]]
  then
    echo "Error: I can't read from $CONFIG_FILE"
    exit 1
  fi

  # Read each line of the config file
  while read INPUT_LINE
  do
    # If the line is NOT a comment, treat it as a target
    if [[ ${INPUT_LINE:0:1} != "#" ]]
    then

      #
      # Config file: process a source directory to be backed up
      #

      if [[ ${INPUT_LINE:0:6} == "source" ]]
      then

        # Truncate "target " from the front of the line
        INPUT_LINE=${INPUT_LINE:7}

        # Remove extra fields or comments form our input line
        clean_trailing_input_line

        # If the source exists, add it to our list of targets
        if [[ -a $INPUT_LINE ]]
        then
          # Append this source to our array of sources
          SOURCES=$((SOURCES+1))
          SOURCE_LIST+=("$INPUT_LINE")

          # Append this directory to a single string listing all sources for tar
          SOURCE_DIR_STRING="$SOURCE_DIR_STRING $INPUT_LINE"
        else
          if [[ ! -r $INPUT_LINE ]]
          then
            echo "WARNING: Source $INPUT_LINE is not accessible."
          else
            echo "WARNING: Source $INPUT_LINE does not exist."
          fi
        fi
      fi

      #
      # Config file: Exclude an object from the filesystem
      #

      if [[ ${INPUT_LINE:0:7} == "exclude" ]]
      then

        # Truncate "exclude " from the front of the line
        INPUT_LINE=${INPUT_LINE:8}

        # Remove extra fields or comments form our input line
        #clean_trailing_input_line

        # Append this source to our array of sources
        EXCLUDES=$((EXCLUDES+1))
        EXCLUDE_LIST+=("$INPUT_LINE")

        # Append this directory to a single string listing all sources for tar
        TAR_EXCLUDE_DIR_STRING="$TAR_EXCLUDE_DIR_STRING --exclude=\"$INPUT_LINE\""
        RSYNC_EXCLUDE_DIR_STRING="$RSYNC_EXCLUDE_DIR_STRING --exclude \"$INPUT_LINE\""
      fi

      #
      # Config file: Process a destination target for this backup
      #

      if [[ ${INPUT_LINE:0:6} == "target" ]]
      then

        # Truncate "target " from the front of the line
        INPUT_LINE=${INPUT_LINE:7}

        # Capture the name of this target by finding the space between name & tgt
        SPACE_POS=$(expr index "$INPUT_LINE" " "})
        if [[ $SPACE_POS -gt 0 ]]
        then
          # Capture just the target
          TARGET_NAME_END=$((SPACE_POS-1))

          TARGET_NAME_STRING=${INPUT_LINE:0:TARGET_NAME_END}

          # Prune input so it's
          INPUT_LINE=${INPUT_LINE:SPACE_POS}
        fi

        # Capture the type of target such as cp, tar or rsync
        SPACE_POS=$(expr index "$INPUT_LINE" " "})
        if [[ $SPACE_POS -gt 0 ]]
        then
          # Capture just the target
          TARGET_METHOD_END=$((SPACE_POS-1))

          TARGET_METHOD_STRING=${INPUT_LINE:0:TARGET_METHOD_END}

          # Prune input so it's
          INPUT_LINE=${INPUT_LINE:SPACE_POS}
        fi

        # Remove extra fields or comments form our input line
        clean_trailing_input_line

        # If the target exists, add it to our list of targets
        if [[ -d $INPUT_LINE ]]
        then

          # default to no, add this target
          SKIP_THIS=false

          # If we have one or more skips, check them
          if [[ $SKIP_TARGETS -gt 0 ]]
          then

            # Process each memory stick one at a time
            for IDX in $(seq 0 $SKIP_TARGETS)
            do

              # Toggle false if this target is in the skip list
              #echo "|${SKIP_TARGET_LIST[$IDX]}|$TARGET_NAME_STRING|"
              if [[ ${SKIP_TARGET_LIST[$IDX]} == $TARGET_NAME_STRING ]]
              then
                echo "Skipping $TARGET_NAME_STRING from config file."
                SKIP_THIS=true
              fi
            done

          fi

          if [[ $SKIP_THIS != true ]]
          then

            add_target "$INPUT_LINE" "$TARGET_NAME_STRING" "$TARGET_METHOD_STRING"

            # If the target is somethig other than null, then we have a valid tgt
            if [[ $TARGET_NAME_STRING == $CLI_TARGET_NAME ]]
            then
              CLI_TARGET_VALID=true
            fi
          fi
        else
          if [[ ! -r $INPUT_LINE ]]
          then
            echo "WARNING: Target $INPUT_LINE is not accessible."
          else
            echo "WARNING: Target $INPUT_LINE does not exist."
          fi
        fi
      fi

    fi
  done < $CONFIG_FILE
}

function validate_options {

  # Bail out if we have no sources
  if [[ $SOURCES == 0 ]]
  then
    echo "Error: There are no backup sources available."
    exit 1
  fi

  # Bail out if we have no targets
  if [[ $TARGETS == 0 ]]
  then
    echo "Error: There are no backup targets available."
    exit 1
  fi

  # Bail out if the user requested a target name we can't find
  if [[ $CLI_TARGET_VALID == false ]]
  then
    echo "Error: There is no target configured as $CLI_TARGET_NAME"
    exit 1
  fi

}

function report_sizes {

  echo
  echo "Backing up $SOURCES sources:"

  SOURCES_COUNT=$((SOURCES-1))
  for SOURCE_IDX in $(seq 0 $SOURCES_COUNT)
  do

    if [[ $TAR_EXCLUDE_DIR_STRING != "" ]]
    then

      #echo "TAR_EXCLUDE_DIR_STRING |$TAR_EXCLUDE_DIR_STRING|"
      du_string="du -sh $TAR_EXCLUDE_DIR_STRING ${SOURCE_LIST[$SOURCE_IDX]}"
      DU_HUMAN=$(eval $du_string | awk '{print $1}')

    else
      DU_HUMAN=$(du -sh ${SOURCE_LIST[$SOURCE_IDX]} | awk '{print $1}')
    fi

    # Report it in column 1 right-justified
    printf "%10s" $DU_HUMAN
    # Report name of source in column 2, left-justified, no size
    echo " ${SOURCE_LIST[$SOURCE_IDX]}"

    # Capture size of source in bytes
    #DU_BYTES=$(du -sb ${SOURCE_LIST[$SOURCE_IDX]} | awk '{print $1}')

    du_string="du -sb $TAR_EXCLUDE_DIR_STRING ${SOURCE_LIST[$SOURCE_IDX]}"
    DU_BYTES=$(eval $du_string | awk '{print $1}')

    # Add size of source to total sources size by bytes
    TOTAL_DU_BYTES=$((TOTAL_DU_BYTES+DU_BYTES))
  done

  # Provide a total
  if [[ $TOTAL_DU_BYTES -gt 0 ]]
  then

    # Use the non-floating point values to decide what to report
    TOTAL_DU_KB=$(($TOTAL_DU_BYTES/1024))
    TOTAL_DU_MB=$((TOTAL_DU_BYTES/1048576))
    TOTAL_DU_GB=$((TOTAL_DU_BYTES/1073741824))

    # Use bc to calculate floating point values
    TOTAL_DU_KB_FP=$(echo "scale=2; $TOTAL_DU_BYTES / 1024" | bc )
    TOTAL_DU_MB_FP=$(echo "scale=2; $TOTAL_DU_BYTES / 1048576" | bc )
    TOTAL_DU_GB_FP=$(echo "scale=2; $TOTAL_DU_BYTES / 1073741824" | bc)

    printf "%10s\n" "-----"

    if [[ $TOTAL_DU_GB -gt 0 ]]
    then
      printf "%10s" $TOTAL_DU_GB_FP
      echo " Gigabytes TOTAL"
    elif [[ $TOTAL_DU_MB -gt 0 ]]
    then
      printf "%10s" $TOTAL_DU_MB_FP
      echo " Megabytes TOTAL"
    elif [[ $TOTAL_DU_KB -gt 0 ]]
    then
      printf "%10s" $TOTAL_DU_KB_FP
      echo " Kilobytes TOTAL"
    elif [[ $TOTAL_DU_MB -gt 0 ]]
    then
      printf "%10s" $TOTAL_DU_BYTES
      echo " Bytes TOTAL"
    fi

  fi

  echo

}

function report_excludes {
  if [[ $EXCLUDES -gt 0 ]]
  then
    echo "Excluding these $EXCLUDES objects:"

    EXCLUDES_COUNT=$((EXCLUDES-1))
    for EXCLUDE_IDX in $(seq 0 $EXCLUDES_COUNT)
    do
      echo "${EXCLUDE_LIST[$EXCLUDE_IDX]}"
    done
  fi

  echo
}

function report_targets {
  if [[ $BACKUP_TO_ALL_TARGETS == true ]]
  then
    echo "Writing to $TARGETS targets:"

    TARGETS_COUNT=$((TARGETS-1))
    for TARGET_IDX in $(seq 0 $TARGETS_COUNT)
    do
      echo "${TARGET_DIR[$TARGET_IDX]}"
    done
  else
    echo "Writing to target $CLI_TARGET_NAME only."
  fi
}

#
# Copy data via tar to a storage device
#

function backup_via_tar {

  echo "PERFORMING TAR BACKUP to ${TARGET_STRING}"

  TARGET_STRING="${TARGET_DIR[$TARGET_IDX]}/${CONFIG_FILE_TAG}host-${HOSTNAME}-${USER}-${DATETIME}${CONFIG_TAR_EXT}"

  if [[ $TAR_EXCLUDE_DIR_STRING != "" ]]
  then

    echo eval tar $CONFIG_TAR_PARAMETERS $TAR_EXCLUDE_DIR_STRING -f ${TARGET_STRING} $SOURCE_DIR_STRING
    eval tar $CONFIG_TAR_PARAMETERS $TAR_EXCLUDE_DIR_STRING -f ${TARGET_STRING} $SOURCE_DIR_STRING
  else
    echo eval tar $CONFIG_TAR_PARAMETERS -f ${TARGET_STRING} $SOURCE_DIR_STRING
    eval tar $CONFIG_TAR_PARAMETERS -f ${TARGET_STRING} $SOURCE_DIR_STRING
  fi

  echo "Completed attempt to tar to ${TARGET_STRING}"
}

#
# Copy data via rsync to a storage device
#

function backup_via_rsync {
  echo "PERFORMING RSYNC BACKUP to ${TARGET_STRING}"

  TARGET_STRING="${TARGET_DIR[$TARGET_IDX]}/${CONFIG_FILE_TAG}${HOSTNAME}-${USER}.${DATETIME}${CONFIG_RSYNC_EXT}"

  # Create the target string directory on the target and write data into it
  mkdir -p "${TARGET_STRING}"

  # Verify we were able to write data to the target directory
  RESULT=$?
  if [[ $RESULT != 0 ]]
  then
    echo "Error: Can't make target directory ${TARGET_STRING}"
    exit 1
  else

    echo eval rsync $TAR_EXCLUDE_DIR_STRING $CONFIG_RSYNC_PARAMETERS $SOURCE_DIR_STRING ${TARGET_STRING}
    eval rsync $TAR_EXCLUDE_DIR_STRING $CONFIG_RSYNC_PARAMETERS $SOURCE_DIR_STRING ${TARGET_STRING}
  fi

  echo "Completed attempt to rsync to ${TARGET_STRING}"

}

#----------------------------------------------------------------------------
# MAIN PROCESSING
#----------------------------------------------------------------------------

CMD_LIST=false

while [ "$1" != "" ]
do

	case $1 in

		# enable debugging output
		-d | --debug )
			DEBUG="yes";;

		-l | --list)
			CMD_LIST=true;;

		--target )
			shift
      only_target $1;;

		--skip)
			shift
      skip_target $1;;

    --config)
			shift
      use_config $1;;

		-h | --help )
		usage
		exit 0;;

		# Something we don't understand? show syntax and exit
		* )
		usage
		exit 1;;
	esac
	shift
done

# Ensure we can write to a log file
check_log_dir

# Report date, mostly for log file
date | tee -a "${LOG_FILE}"

# Load sources, excludes and targets from config file
load_config_file

# Validate that we have sources and targets to work with
validate_options

# Report sizes of source directories and total source volume
report_sizes | tee -a "${LOG_FILE}"

# Report directories excluded from backup
report_excludes | tee -a "${LOG_FILE}"

# Report targets where backups will be saved
report_targets | tee -a "${LOG_FILE}"

read -p "Ready ?" YESNO
if [[ $YESNO != "y" && $YESNO != "Y" && $YESNO != "yes" ]]
then
  exit 0
fi

DATETIME=$(date +%Y-%m%d)

# Process each memory stick one at a time
TARGETS_COUNT=$((TARGETS-1))
for TARGET_IDX in $(seq 0 $TARGETS_COUNT)
do

  # Remove the leading space from this target array's name
  THIS_TARGET_NAME=${TARGET_NAME[$TARGET_IDX]:1}

  # Perform our backupt if we're writing to all targets or
  # or this is our selected one
  if [[ $BACKUP_TO_ALL_TARGETS == true || ${THIS_TARGET_NAME} == $CLI_TARGET_NAME ]]
  then

    echo $TARGET_IDX ${TARGET_METHOD[$TARGET_IDX]}

    case ${TARGET_METHOD[$TARGET_IDX]} in
      "tar" )
        backup_via_tar | tee -a $LOG_FILE;;

      "rsync" )
        backup_via_rsync | tee -a $LOG_FILE;;
    esac

    echo
  fi

done